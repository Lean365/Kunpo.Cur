// -----------------------------------------------------------------------
// <copyright file="KpExcelHelper.cs" company="昆珀科技">
// Copyright (c) 昆珀科技. All rights reserved.
// </copyright>
// <author>昆珀科技</author>
// <date>2024-03-21</date>
// <summary>Excel导入导出工具类</summary>
// -----------------------------------------------------------------------

using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Kunpo.Cur.Common.Attributes;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using Kunpo.Cur.Common.Options;
using Kunpo.Cur.Common.Utils;

namespace Kunpo.Cur.Common.Utils
{
  /// <summary>
  /// Excel导入导出工具类
  /// </summary>
  public class KpExcelHelper
  {
    private readonly KpExcelOption _options;

    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="options">Excel配置选项</param>
    public KpExcelHelper(IOptions<KpExcelOption> options)
    {
      _options = options?.Value ?? throw new ArgumentNullException(nameof(options));
    }

    /// <summary>
    /// 导出Excel
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="data">数据列表</param>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    /// <returns>Excel文件字节数组</returns>
    public async Task<byte[]> ExportAsync<T>(IEnumerable<T> data, string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null)
    {
      if (data == null) throw new ArgumentNullException(nameof(data));
      sheetName ??= "Sheet1";

      using var package = new ExcelPackage();

      // 设置工作簿属性
      var workbook = package.Workbook;
      var properties = _options?.Workbook?.Properties;

      workbook.Properties.Author = properties?.Author ?? string.Empty;
      workbook.Properties.Title = properties?.Title ?? string.Empty;
      workbook.Properties.Subject = properties?.Subject ?? string.Empty;
      workbook.Properties.Keywords = $"{properties?.Title ?? "Export"} Export";
      workbook.Properties.Category = properties?.Category ?? string.Empty;
      workbook.Properties.Comments = $"This file was generated by {properties?.Title ?? "System"} at {DateTime.Now:yyyy/MM/dd HH:mm:ss}";
      workbook.Properties.Company = properties?.Company ?? string.Empty;
      workbook.Properties.Manager = properties?.Manager ?? string.Empty;
      workbook.Properties.LastModifiedBy = Environment.UserName;
      workbook.Properties.Created = DateTime.Now;
      workbook.Properties.Modified = DateTime.Now;
      workbook.Properties.LastPrinted = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
      workbook.Properties.Application = properties?.Application ?? string.Empty;
      workbook.Properties.AppVersion = properties?.AppVersion ?? string.Empty;
      workbook.Properties.HyperlinkBase = new Uri(properties?.HyperlinkBase ?? "about:blank");
      workbook.Properties.Status = properties?.Status ?? string.Empty;

      var worksheet = package.Workbook.Worksheets.Add(sheetName);

      // 获取属性信息
      var propertiesInfo = typeof(T).GetProperties();
      var headers = new List<string>();
      var propertyNames = new List<string>();

      // 处理列映射
      if (columnMappings != null && columnMappings.Any())
      {
        foreach (var mapping in columnMappings)
        {
          headers.Add(mapping.Value);
          propertyNames.Add(mapping.Key);
        }
      }
      else
      {
        foreach (var prop in propertiesInfo)
        {
          var excelColumnName = prop.GetCustomAttribute<KpExcelColumnNameAttribute>();
          if (excelColumnName != null && !excelColumnName.ExcelIgnore)
          {
            var columnName = excelColumnName.ColumnName;
            if (!string.IsNullOrEmpty(columnName))
            {
              headers.Add(columnName);
              propertyNames.Add(prop.Name);
            }
          }
        }
      }

      // 写入表头
      for (int i = 0; i < headers.Count; i++)
      {
        worksheet.Cells[1, i + 1].Value = headers[i];
      }

      // 设置表头样式
      using (var range = worksheet.Cells[1, 1, 1, headers.Count])
      {
        range.Style.Font.Bold = true;
        range.Style.Fill.PatternType = ExcelFillStyle.Solid;
        range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
        range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
      }

      // 写入数据
      int row = 2;
      foreach (var item in data)
      {
        for (int col = 0; col < propertyNames.Count; col++)
        {
          var property = propertiesInfo.FirstOrDefault(p => p.Name == propertyNames[col]);
          if (property != null)
          {
            var value = property.GetValue(item);
            worksheet.Cells[row, col + 1].Value = value;
          }
        }
        row++;
      }

      // 自动调整列宽
      worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

      // 设置数据区域样式
      using (var range = worksheet.Cells[2, 1, row - 1, headers.Count])
      {
        range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
        range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
      }

      return await package.GetAsByteArrayAsync();
    }

    /// <summary>
    /// 导出Excel到文件
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="data">数据列表</param>
    /// <param name="filePath">文件路径</param>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    public async Task ExportToFileAsync<T>(IEnumerable<T> data, string? filePath, string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null)
    {
      if (data == null) throw new ArgumentNullException(nameof(data));
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));
      sheetName ??= "Sheet1";

      var directoryPath = KpFileHelper.GetDirectoryName(filePath);
      if (!string.IsNullOrEmpty(directoryPath))
      {
        KpFileHelper.EnsureDirectoryExists(directoryPath);
      }
      var excelBytes = await ExportAsync(data, sheetName, columnMappings);
      await File.WriteAllBytesAsync(filePath, excelBytes);
    }

    /// <summary>
    /// 导入Excel
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="excelBytes">Excel文件字节数组</param>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（列名:属性名）</param>
    /// <returns>数据列表</returns>
    public static Task<List<T>> ImportAsync<T>(byte[] excelBytes, string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null) where T : new()
    {
      if (excelBytes == null || excelBytes.Length == 0) throw new ArgumentException("Excel数据不能为空", nameof(excelBytes));
      sheetName ??= "Sheet1";

      using var package = new ExcelPackage(new MemoryStream(excelBytes));
      var worksheet = package.Workbook.Worksheets[sheetName] ?? throw new InvalidOperationException($"找不到工作表 {sheetName}");
      var result = new List<T>();

      // 获取属性信息
      var properties = typeof(T).GetProperties();
      var headers = new List<string>();
      var propertyNames = new List<string>();

      // 获取表头
      for (int i = 1; i <= worksheet.Dimension.End.Column; i++)
      {
        var headerText = worksheet.Cells[1, i].Text;
        if (!string.IsNullOrEmpty(headerText))
        {
          headers.Add(headerText);
        }
      }

      // 处理列映射
      if (columnMappings != null && columnMappings.Any())
      {
        foreach (var header in headers)
        {
          if (columnMappings.TryGetValue(header, out string? propertyName) && propertyName != null)
          {
            propertyNames.Add(propertyName);
          }
          else
          {
            propertyNames.Add(string.Empty);
          }
        }
      }
      else
      {
        foreach (var header in headers)
        {
          var property = properties.FirstOrDefault(p =>
          {
            var attr = p.GetCustomAttribute<KpExcelColumnNameAttribute>();
            return attr != null && !attr.ExcelIgnore && attr.ColumnName == header;
          });

          if (property != null)
          {
            propertyNames.Add(property.Name);
          }
          else
          {
            propertyNames.Add(string.Empty);
          }
        }
      }

      // 读取数据
      for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
      {
        var item = new T();
        for (int col = 0; col < headers.Count; col++)
        {
          if (string.IsNullOrEmpty(propertyNames[col])) continue;

          var property = properties.FirstOrDefault(p => p.Name == propertyNames[col]);
          if (property == null) continue;

          var cellValue = worksheet.Cells[row, col + 1].Value;
          if (cellValue != null)
          {
            try
            {
              var convertedValue = Convert.ChangeType(cellValue, property.PropertyType);
              property.SetValue(item, convertedValue);
            }
            catch
            {
              // 转换失败时跳过
            }
          }
        }
        result.Add(item);
      }

      return Task.FromResult(result);
    }

    /// <summary>
    /// 从文件导入Excel
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="filePath">文件路径</param>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（列名:属性名）</param>
    /// <returns>数据列表</returns>
    public static async Task<List<T>> ImportFromFileAsync<T>(string? filePath, string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null) where T : new()
    {
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));
      var excelBytes = await File.ReadAllBytesAsync(filePath);
      return await ImportAsync<T>(excelBytes, sheetName, columnMappings);
    }

    /// <summary>
    /// 获取Excel模板
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    /// <returns>Excel文件字节数组</returns>
    public async Task<byte[]> GetTemplateAsync<T>(string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null)
    {
      return await ExportAsync<T>(new List<T>(), sheetName, columnMappings);
    }

    /// <summary>
    /// 获取Excel模板到文件
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="filePath">文件路径</param>
    /// <param name="sheetName">工作表名称</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    public async Task GetTemplateToFileAsync<T>(string? filePath, string? sheetName = "Sheet1", Dictionary<string, string>? columnMappings = null)
    {
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));
      var directoryPath = KpFileHelper.GetDirectoryName(filePath);
      KpFileHelper.EnsureDirectoryExists(directoryPath);
      var excelBytes = await GetTemplateAsync<T>(sheetName, columnMappings);
      await File.WriteAllBytesAsync(filePath, excelBytes);
    }

    /// <summary>
    /// 导出多个工作表到Excel
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="sheetData">工作表数据（工作表名称:数据列表）</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    /// <returns>Excel文件字节数组</returns>
    public async Task<byte[]> ExportMultipleSheetsAsync<T>(Dictionary<string, IEnumerable<T>> sheetData, Dictionary<string, string>? columnMappings = null)
    {
      if (sheetData == null || !sheetData.Any()) throw new ArgumentException("工作表数据不能为空", nameof(sheetData));

      using var package = new ExcelPackage();

      // 设置工作簿属性
      var workbook = package.Workbook;
      var properties = _options?.Workbook?.Properties;

      workbook.Properties.Author = properties?.Author;
      workbook.Properties.Title = properties?.Title;
      workbook.Properties.Subject = properties?.Subject;
      workbook.Properties.Keywords = $"{properties?.Title} Export";
      workbook.Properties.Category = properties?.Category;
      workbook.Properties.Comments = $"This file was generated by {properties?.Title} at {DateTime.Now:yyyy/MM/dd HH:mm:ss}";
      workbook.Properties.Company = properties?.Company;
      workbook.Properties.Manager = properties?.Manager;
      workbook.Properties.LastModifiedBy = Environment.UserName;
      workbook.Properties.Created = DateTime.Now;
      workbook.Properties.Modified = DateTime.Now;
      workbook.Properties.LastPrinted = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
      workbook.Properties.Application = properties?.Application;
      workbook.Properties.AppVersion = properties?.AppVersion;
      workbook.Properties.HyperlinkBase = new Uri(properties?.HyperlinkBase ?? "about:blank");
      workbook.Properties.Status = properties?.Status;

      foreach (var sheet in sheetData)
      {
        if (string.IsNullOrEmpty(sheet.Key)) continue;
        if (sheet.Value == null) continue;

        var worksheet = package.Workbook.Worksheets.Add(sheet.Key);

        // 获取属性信息
        var propertiesInfo = typeof(T).GetProperties();
        var headers = new List<string>();
        var propertyNames = new List<string>();

        // 处理列映射
        if (columnMappings != null && columnMappings.Any())
        {
          foreach (var mapping in columnMappings)
          {
            headers.Add(mapping.Value);
            propertyNames.Add(mapping.Key);
          }
        }
        else
        {
          foreach (var prop in propertiesInfo)
          {
            var excelColumnName = prop.GetCustomAttribute<KpExcelColumnNameAttribute>();
            if (excelColumnName != null)
            {
              var columnName = excelColumnName.ColumnName;
              if (!string.IsNullOrEmpty(columnName))
              {
                headers.Add(columnName);
                propertyNames.Add(prop.Name);
              }
            }
          }
        }

        // 写入表头
        for (int i = 0; i < headers.Count; i++)
        {
          worksheet.Cells[1, i + 1].Value = headers[i];
        }

        // 设置表头样式
        using (var range = worksheet.Cells[1, 1, 1, headers.Count])
        {
          range.Style.Font.Bold = true;
          range.Style.Fill.PatternType = ExcelFillStyle.Solid;
          range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
          range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
          range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        }

        // 写入数据
        int row = 2;
        foreach (var item in sheet.Value)
        {
          for (int col = 0; col < propertyNames.Count; col++)
          {
            var property = propertiesInfo.FirstOrDefault(p => p.Name == propertyNames[col]);
            if (property != null)
            {
              var value = property.GetValue(item);
              worksheet.Cells[row, col + 1].Value = value;
            }
          }
          row++;
        }

        // 自动调整列宽
        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

        // 设置数据区域样式
        using (var range = worksheet.Cells[2, 1, row - 1, headers.Count])
        {
          range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
          range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        }
      }

      return await package.GetAsByteArrayAsync();
    }

    /// <summary>
    /// 导出多个工作表到Excel文件
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="sheetData">工作表数据（工作表名称:数据列表）</param>
    /// <param name="filePath">文件路径</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    public async Task ExportMultipleSheetsToFileAsync<T>(Dictionary<string, IEnumerable<T>> sheetData, string? filePath, Dictionary<string, string>? columnMappings = null)
    {
      if (sheetData == null || !sheetData.Any()) throw new ArgumentException("工作表数据不能为空", nameof(sheetData));
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));

      var directoryPath = KpFileHelper.GetDirectoryName(filePath);
      if (!string.IsNullOrEmpty(directoryPath))
      {
        KpFileHelper.EnsureDirectoryExists(directoryPath);
      }
      var excelBytes = await ExportMultipleSheetsAsync(sheetData, columnMappings);
      await File.WriteAllBytesAsync(filePath, excelBytes);
    }

    /// <summary>
    /// 导入多个工作表
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="excelBytes">Excel文件字节数组</param>
    /// <param name="columnMappings">列映射（列名:属性名）</param>
    /// <returns>工作表数据字典（工作表名称:数据列表）</returns>
    public static async Task<Dictionary<string, List<T>>> ImportMultipleSheetsAsync<T>(byte[] excelBytes, Dictionary<string, string>? columnMappings = null) where T : new()
    {
      if (excelBytes == null || excelBytes.Length == 0) throw new ArgumentException("Excel数据不能为空", nameof(excelBytes));

      using var package = new ExcelPackage(new MemoryStream(excelBytes));
      var result = new Dictionary<string, List<T>>();

      foreach (var worksheet in package.Workbook.Worksheets)
      {
        if (worksheet == null || string.IsNullOrEmpty(worksheet.Name)) continue;
        result[worksheet.Name] = await ImportAsync<T>(excelBytes, worksheet.Name, columnMappings);
      }

      return result;
    }

    /// <summary>
    /// 从文件导入多个工作表
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="filePath">文件路径</param>
    /// <param name="columnMappings">列映射（列名:属性名）</param>
    /// <returns>工作表数据字典（工作表名称:数据列表）</returns>
    public static async Task<Dictionary<string, List<T>>> ImportMultipleSheetsFromFileAsync<T>(string? filePath, Dictionary<string, string>? columnMappings = null) where T : new()
    {
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));
      if (!File.Exists(filePath)) throw new FileNotFoundException("找不到Excel文件", filePath);

      var excelBytes = await File.ReadAllBytesAsync(filePath);
      return await ImportMultipleSheetsAsync<T>(excelBytes, columnMappings);
    }

    /// <summary>
    /// 获取多个工作表的模板
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="sheetNames">工作表名称列表</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    /// <returns>Excel文件字节数组</returns>
    public Task<byte[]> GetMultipleSheetsTemplateAsync<T>(IEnumerable<string> sheetNames, Dictionary<string, string>? columnMappings = null)
    {
      if (sheetNames == null || !sheetNames.Any()) throw new ArgumentException("工作表名称不能为空", nameof(sheetNames));

      var sheetData = sheetNames.ToDictionary(name => name, _ => Enumerable.Empty<T>());
      return ExportMultipleSheetsAsync(sheetData, columnMappings);
    }

    /// <summary>
    /// 获取多个工作表的模板并保存到文件
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    /// <param name="filePath">文件路径</param>
    /// <param name="sheetNames">工作表名称列表</param>
    /// <param name="columnMappings">列映射（属性名:列名）</param>
    public async Task GetMultipleSheetsTemplateToFileAsync<T>(string? filePath, IEnumerable<string> sheetNames, Dictionary<string, string>? columnMappings = null)
    {
      if (string.IsNullOrEmpty(filePath)) throw new ArgumentException("文件路径不能为空", nameof(filePath));
      if (sheetNames == null || !sheetNames.Any()) throw new ArgumentException("工作表名称不能为空", nameof(sheetNames));

      var directoryPath = KpFileHelper.GetDirectoryName(filePath);
      if (!string.IsNullOrEmpty(directoryPath))
      {
        KpFileHelper.EnsureDirectoryExists(directoryPath);
      }
      var excelBytes = await GetMultipleSheetsTemplateAsync<T>(sheetNames, columnMappings);
      await File.WriteAllBytesAsync(filePath, excelBytes);
    }
  }
}